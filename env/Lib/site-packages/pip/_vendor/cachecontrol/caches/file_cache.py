# SPDX-FileCopyrightText: 2015 Eric Larson
#
# SPDX-License-Identifier: Apache-2.0
<<<<<<< HEAD
=======
from __future__ import annotations
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b

import hashlib
import os
from textwrap import dedent
<<<<<<< HEAD

from ..cache import BaseCache, SeparateBodyBaseCache
from ..controller import CacheController

try:
    FileNotFoundError
except NameError:
    # py2.X
    FileNotFoundError = (IOError, OSError)


def _secure_open_write(filename, fmode):
=======
from typing import IO, TYPE_CHECKING

from pip._vendor.cachecontrol.cache import BaseCache, SeparateBodyBaseCache
from pip._vendor.cachecontrol.controller import CacheController

if TYPE_CHECKING:
    from datetime import datetime

    from filelock import BaseFileLock


def _secure_open_write(filename: str, fmode: int) -> IO[bytes]:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
    # We only want to write to this file, so open it in write only mode
    flags = os.O_WRONLY

    # os.O_CREAT | os.O_EXCL will fail if the file already exists, so we only
    #  will open *new* files.
    # We specify this because we want to ensure that the mode we pass is the
    # mode of the file.
    flags |= os.O_CREAT | os.O_EXCL

    # Do not follow symlinks to prevent someone from making a symlink that
    # we follow and insecurely open a cache file.
    if hasattr(os, "O_NOFOLLOW"):
        flags |= os.O_NOFOLLOW

    # On Windows we'll mark this file as binary
    if hasattr(os, "O_BINARY"):
        flags |= os.O_BINARY

    # Before we open our file, we want to delete any existing file that is
    # there
    try:
        os.remove(filename)
<<<<<<< HEAD
    except (IOError, OSError):
=======
    except OSError:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        # The file must not exist already, so we can just skip ahead to opening
        pass

    # Open our file, the use of os.O_CREAT | os.O_EXCL will ensure that if a
    # race condition happens between the os.remove and this line, that an
    # error will be raised. Because we utilize a lockfile this should only
    # happen if someone is attempting to attack us.
    fd = os.open(filename, flags, fmode)
    try:
        return os.fdopen(fd, "wb")

    except:
        # An error occurred wrapping our FD in a file object
        os.close(fd)
        raise


class _FileCacheMixin:
    """Shared implementation for both FileCache variants."""

    def __init__(
        self,
<<<<<<< HEAD
        directory,
        forever=False,
        filemode=0o0600,
        dirmode=0o0700,
        use_dir_lock=None,
        lock_class=None,
    ):

        if use_dir_lock is not None and lock_class is not None:
            raise ValueError("Cannot use use_dir_lock and lock_class together")

        try:
            from lockfile import LockFile
            from lockfile.mkdirlockfile import MkdirLockFile
=======
        directory: str,
        forever: bool = False,
        filemode: int = 0o0600,
        dirmode: int = 0o0700,
        lock_class: type[BaseFileLock] | None = None,
    ) -> None:
        try:
            if lock_class is None:
                from filelock import FileLock

                lock_class = FileLock
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        except ImportError:
            notice = dedent(
                """
            NOTE: In order to use the FileCache you must have
<<<<<<< HEAD
            lockfile installed. You can install it via pip:
              pip install lockfile
=======
            filelock installed. You can install it via pip:
              pip install filelock
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
            """
            )
            raise ImportError(notice)

<<<<<<< HEAD
        else:
            if use_dir_lock:
                lock_class = MkdirLockFile

            elif lock_class is None:
                lock_class = LockFile

=======
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        self.directory = directory
        self.forever = forever
        self.filemode = filemode
        self.dirmode = dirmode
        self.lock_class = lock_class

    @staticmethod
<<<<<<< HEAD
    def encode(x):
        return hashlib.sha224(x.encode()).hexdigest()

    def _fn(self, name):
=======
    def encode(x: str) -> str:
        return hashlib.sha224(x.encode()).hexdigest()

    def _fn(self, name: str) -> str:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        # NOTE: This method should not change as some may depend on it.
        #       See: https://github.com/ionrock/cachecontrol/issues/63
        hashed = self.encode(name)
        parts = list(hashed[:5]) + [hashed]
        return os.path.join(self.directory, *parts)

<<<<<<< HEAD
    def get(self, key):
=======
    def get(self, key: str) -> bytes | None:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        name = self._fn(key)
        try:
            with open(name, "rb") as fh:
                return fh.read()

        except FileNotFoundError:
            return None

<<<<<<< HEAD
    def set(self, key, value, expires=None):
        name = self._fn(key)
        self._write(name, value)

    def _write(self, path, data: bytes):
=======
    def set(
        self, key: str, value: bytes, expires: int | datetime | None = None
    ) -> None:
        name = self._fn(key)
        self._write(name, value)

    def _write(self, path: str, data: bytes) -> None:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        """
        Safely write the data to the given path.
        """
        # Make sure the directory exists
        try:
            os.makedirs(os.path.dirname(path), self.dirmode)
<<<<<<< HEAD
        except (IOError, OSError):
            pass

        with self.lock_class(path) as lock:
            # Write our actual file
            with _secure_open_write(lock.path, self.filemode) as fh:
                fh.write(data)

    def _delete(self, key, suffix):
=======
        except OSError:
            pass

        with self.lock_class(path + ".lock"):
            # Write our actual file
            with _secure_open_write(path, self.filemode) as fh:
                fh.write(data)

    def _delete(self, key: str, suffix: str) -> None:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        name = self._fn(key) + suffix
        if not self.forever:
            try:
                os.remove(name)
            except FileNotFoundError:
                pass


class FileCache(_FileCacheMixin, BaseCache):
    """
    Traditional FileCache: body is stored in memory, so not suitable for large
    downloads.
    """

<<<<<<< HEAD
    def delete(self, key):
=======
    def delete(self, key: str) -> None:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        self._delete(key, "")


class SeparateBodyFileCache(_FileCacheMixin, SeparateBodyBaseCache):
    """
    Memory-efficient FileCache: body is stored in a separate file, reducing
    peak memory usage.
    """

<<<<<<< HEAD
    def get_body(self, key):
=======
    def get_body(self, key: str) -> IO[bytes] | None:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        name = self._fn(key) + ".body"
        try:
            return open(name, "rb")
        except FileNotFoundError:
            return None

<<<<<<< HEAD
    def set_body(self, key, body):
        name = self._fn(key) + ".body"
        self._write(name, body)

    def delete(self, key):
=======
    def set_body(self, key: str, body: bytes) -> None:
        name = self._fn(key) + ".body"
        self._write(name, body)

    def delete(self, key: str) -> None:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
        self._delete(key, "")
        self._delete(key, ".body")


<<<<<<< HEAD
def url_to_file_path(url, filecache):
=======
def url_to_file_path(url: str, filecache: FileCache) -> str:
>>>>>>> cb1a13782f8f08e95846dd5b015668938107b13b
    """Return the file cache path based on the URL.

    This does not ensure the file exists!
    """
    key = CacheController.cache_url(url)
    return filecache._fn(key)
